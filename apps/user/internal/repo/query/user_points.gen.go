// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bobacgo/ai-shop/user/internal/repo/model"
)

func newUserPoint(db *gorm.DB, opts ...gen.DOOption) userPoint {
	_userPoint := userPoint{}

	_userPoint.userPointDo.UseDB(db, opts...)
	_userPoint.userPointDo.UseModel(&model.UserPoint{})

	tableName := _userPoint.userPointDo.TableName()
	_userPoint.ALL = field.NewAsterisk(tableName)
	_userPoint.ID = field.NewString(tableName, "id")
	_userPoint.UserID = field.NewString(tableName, "user_id")
	_userPoint.Points = field.NewInt32(tableName, "points")
	_userPoint.Reason = field.NewInt32(tableName, "reason")
	_userPoint.Description = field.NewString(tableName, "description")
	_userPoint.CreatedAt = field.NewTime(tableName, "created_at")
	_userPoint.ExpiredAt = field.NewTime(tableName, "expired_at")

	_userPoint.fillFieldMap()

	return _userPoint
}

// userPoint 用户积分记录表（支持积分有效期）
type userPoint struct {
	userPointDo userPointDo

	ALL         field.Asterisk
	ID          field.String // 积分记录ID（UUID）
	UserID      field.String // 用户ID（逻辑关联 users(id)）
	Points      field.Int32  // 积分变动数量（可正可负）
	Reason      field.Int32  // 积分变动原因 (1=购买, 2=签到, 3=邀请, 4=退款, 5=管理员调整, 6=其他)
	Description field.String // 变动描述
	CreatedAt   field.Time   // 创建时间
	ExpiredAt   field.Time   // 积分过期时间（NULL表示永久有效）

	fieldMap map[string]field.Expr
}

func (u userPoint) Table(newTableName string) *userPoint {
	u.userPointDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPoint) As(alias string) *userPoint {
	u.userPointDo.DO = *(u.userPointDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPoint) updateTableName(table string) *userPoint {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.Points = field.NewInt32(table, "points")
	u.Reason = field.NewInt32(table, "reason")
	u.Description = field.NewString(table, "description")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.ExpiredAt = field.NewTime(table, "expired_at")

	u.fillFieldMap()

	return u
}

func (u *userPoint) WithContext(ctx context.Context) IUserPointDo {
	return u.userPointDo.WithContext(ctx)
}

func (u userPoint) TableName() string { return u.userPointDo.TableName() }

func (u userPoint) Alias() string { return u.userPointDo.Alias() }

func (u userPoint) Columns(cols ...field.Expr) gen.Columns { return u.userPointDo.Columns(cols...) }

func (u *userPoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPoint) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["points"] = u.Points
	u.fieldMap["reason"] = u.Reason
	u.fieldMap["description"] = u.Description
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["expired_at"] = u.ExpiredAt
}

func (u userPoint) clone(db *gorm.DB) userPoint {
	u.userPointDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPoint) replaceDB(db *gorm.DB) userPoint {
	u.userPointDo.ReplaceDB(db)
	return u
}

type userPointDo struct{ gen.DO }

type IUserPointDo interface {
	gen.SubQuery
	Debug() IUserPointDo
	WithContext(ctx context.Context) IUserPointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPointDo
	WriteDB() IUserPointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPointDo
	Not(conds ...gen.Condition) IUserPointDo
	Or(conds ...gen.Condition) IUserPointDo
	Select(conds ...field.Expr) IUserPointDo
	Where(conds ...gen.Condition) IUserPointDo
	Order(conds ...field.Expr) IUserPointDo
	Distinct(cols ...field.Expr) IUserPointDo
	Omit(cols ...field.Expr) IUserPointDo
	Join(table schema.Tabler, on ...field.Expr) IUserPointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPointDo
	Group(cols ...field.Expr) IUserPointDo
	Having(conds ...gen.Condition) IUserPointDo
	Limit(limit int) IUserPointDo
	Offset(offset int) IUserPointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPointDo
	Unscoped() IUserPointDo
	Create(values ...*model.UserPoint) error
	CreateInBatches(values []*model.UserPoint, batchSize int) error
	Save(values ...*model.UserPoint) error
	First() (*model.UserPoint, error)
	Take() (*model.UserPoint, error)
	Last() (*model.UserPoint, error)
	Find() ([]*model.UserPoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPoint, err error)
	FindInBatches(result *[]*model.UserPoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPointDo
	Assign(attrs ...field.AssignExpr) IUserPointDo
	Joins(fields ...field.RelationField) IUserPointDo
	Preload(fields ...field.RelationField) IUserPointDo
	FirstOrInit() (*model.UserPoint, error)
	FirstOrCreate() (*model.UserPoint, error)
	FindByPage(offset int, limit int) (result []*model.UserPoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPointDo) Debug() IUserPointDo {
	return u.withDO(u.DO.Debug())
}

func (u userPointDo) WithContext(ctx context.Context) IUserPointDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPointDo) ReadDB() IUserPointDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPointDo) WriteDB() IUserPointDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPointDo) Session(config *gorm.Session) IUserPointDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPointDo) Clauses(conds ...clause.Expression) IUserPointDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPointDo) Returning(value interface{}, columns ...string) IUserPointDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPointDo) Not(conds ...gen.Condition) IUserPointDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPointDo) Or(conds ...gen.Condition) IUserPointDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPointDo) Select(conds ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPointDo) Where(conds ...gen.Condition) IUserPointDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPointDo) Order(conds ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPointDo) Distinct(cols ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPointDo) Omit(cols ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPointDo) Join(table schema.Tabler, on ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPointDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPointDo) Group(cols ...field.Expr) IUserPointDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPointDo) Having(conds ...gen.Condition) IUserPointDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPointDo) Limit(limit int) IUserPointDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPointDo) Offset(offset int) IUserPointDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPointDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPointDo) Unscoped() IUserPointDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPointDo) Create(values ...*model.UserPoint) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPointDo) CreateInBatches(values []*model.UserPoint, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPointDo) Save(values ...*model.UserPoint) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPointDo) First() (*model.UserPoint, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPoint), nil
	}
}

func (u userPointDo) Take() (*model.UserPoint, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPoint), nil
	}
}

func (u userPointDo) Last() (*model.UserPoint, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPoint), nil
	}
}

func (u userPointDo) Find() ([]*model.UserPoint, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPoint), err
}

func (u userPointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPoint, err error) {
	buf := make([]*model.UserPoint, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPointDo) FindInBatches(result *[]*model.UserPoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPointDo) Attrs(attrs ...field.AssignExpr) IUserPointDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPointDo) Assign(attrs ...field.AssignExpr) IUserPointDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPointDo) Joins(fields ...field.RelationField) IUserPointDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPointDo) Preload(fields ...field.RelationField) IUserPointDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPointDo) FirstOrInit() (*model.UserPoint, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPoint), nil
	}
}

func (u userPointDo) FirstOrCreate() (*model.UserPoint, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPoint), nil
	}
}

func (u userPointDo) FindByPage(offset int, limit int) (result []*model.UserPoint, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPointDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPointDo) Delete(models ...*model.UserPoint) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPointDo) withDO(do gen.Dao) *userPointDo {
	u.DO = *do.(*gen.DO)
	return u
}
