// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Merchant    *merchant
	Tag         *tag
	User        *user
	UserAddress *userAddress
	UserPoint   *userPoint
	UserProfile *userProfile
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Merchant = &Q.Merchant
	Tag = &Q.Tag
	User = &Q.User
	UserAddress = &Q.UserAddress
	UserPoint = &Q.UserPoint
	UserProfile = &Q.UserProfile
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Merchant:    newMerchant(db, opts...),
		Tag:         newTag(db, opts...),
		User:        newUser(db, opts...),
		UserAddress: newUserAddress(db, opts...),
		UserPoint:   newUserPoint(db, opts...),
		UserProfile: newUserProfile(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Merchant    merchant
	Tag         tag
	User        user
	UserAddress userAddress
	UserPoint   userPoint
	UserProfile userProfile
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Merchant:    q.Merchant.clone(db),
		Tag:         q.Tag.clone(db),
		User:        q.User.clone(db),
		UserAddress: q.UserAddress.clone(db),
		UserPoint:   q.UserPoint.clone(db),
		UserProfile: q.UserProfile.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Merchant:    q.Merchant.replaceDB(db),
		Tag:         q.Tag.replaceDB(db),
		User:        q.User.replaceDB(db),
		UserAddress: q.UserAddress.replaceDB(db),
		UserPoint:   q.UserPoint.replaceDB(db),
		UserProfile: q.UserProfile.replaceDB(db),
	}
}

type queryCtx struct {
	Merchant    IMerchantDo
	Tag         ITagDo
	User        IUserDo
	UserAddress IUserAddressDo
	UserPoint   IUserPointDo
	UserProfile IUserProfileDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Merchant:    q.Merchant.WithContext(ctx),
		Tag:         q.Tag.WithContext(ctx),
		User:        q.User.WithContext(ctx),
		UserAddress: q.UserAddress.WithContext(ctx),
		UserPoint:   q.UserPoint.WithContext(ctx),
		UserProfile: q.UserProfile.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
