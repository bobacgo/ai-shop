// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bobacgo/ai-shop/user/internal/repo/model"
)

func newUserDeletionRequest(db *gorm.DB, opts ...gen.DOOption) userDeletionRequest {
	_userDeletionRequest := userDeletionRequest{}

	_userDeletionRequest.userDeletionRequestDo.UseDB(db, opts...)
	_userDeletionRequest.userDeletionRequestDo.UseModel(&model.UserDeletionRequest{})

	tableName := _userDeletionRequest.userDeletionRequestDo.TableName()
	_userDeletionRequest.ALL = field.NewAsterisk(tableName)
	_userDeletionRequest.ID = field.NewString(tableName, "id")
	_userDeletionRequest.UserID = field.NewString(tableName, "user_id")
	_userDeletionRequest.RequestedAt = field.NewTime(tableName, "requested_at")

	_userDeletionRequest.fillFieldMap()

	return _userDeletionRequest
}

// userDeletionRequest 用户注销请求表
type userDeletionRequest struct {
	userDeletionRequestDo userDeletionRequestDo

	ALL         field.Asterisk
	ID          field.String // 注销请求ID（UUID）
	UserID      field.String // 用户ID（关联 users(id)）
	RequestedAt field.Time   // 注销请求时间

	fieldMap map[string]field.Expr
}

func (u userDeletionRequest) Table(newTableName string) *userDeletionRequest {
	u.userDeletionRequestDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDeletionRequest) As(alias string) *userDeletionRequest {
	u.userDeletionRequestDo.DO = *(u.userDeletionRequestDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDeletionRequest) updateTableName(table string) *userDeletionRequest {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.RequestedAt = field.NewTime(table, "requested_at")

	u.fillFieldMap()

	return u
}

func (u *userDeletionRequest) WithContext(ctx context.Context) IUserDeletionRequestDo {
	return u.userDeletionRequestDo.WithContext(ctx)
}

func (u userDeletionRequest) TableName() string { return u.userDeletionRequestDo.TableName() }

func (u userDeletionRequest) Alias() string { return u.userDeletionRequestDo.Alias() }

func (u userDeletionRequest) Columns(cols ...field.Expr) gen.Columns {
	return u.userDeletionRequestDo.Columns(cols...)
}

func (u *userDeletionRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDeletionRequest) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["requested_at"] = u.RequestedAt
}

func (u userDeletionRequest) clone(db *gorm.DB) userDeletionRequest {
	u.userDeletionRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDeletionRequest) replaceDB(db *gorm.DB) userDeletionRequest {
	u.userDeletionRequestDo.ReplaceDB(db)
	return u
}

type userDeletionRequestDo struct{ gen.DO }

type IUserDeletionRequestDo interface {
	gen.SubQuery
	Debug() IUserDeletionRequestDo
	WithContext(ctx context.Context) IUserDeletionRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDeletionRequestDo
	WriteDB() IUserDeletionRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDeletionRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDeletionRequestDo
	Not(conds ...gen.Condition) IUserDeletionRequestDo
	Or(conds ...gen.Condition) IUserDeletionRequestDo
	Select(conds ...field.Expr) IUserDeletionRequestDo
	Where(conds ...gen.Condition) IUserDeletionRequestDo
	Order(conds ...field.Expr) IUserDeletionRequestDo
	Distinct(cols ...field.Expr) IUserDeletionRequestDo
	Omit(cols ...field.Expr) IUserDeletionRequestDo
	Join(table schema.Tabler, on ...field.Expr) IUserDeletionRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDeletionRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDeletionRequestDo
	Group(cols ...field.Expr) IUserDeletionRequestDo
	Having(conds ...gen.Condition) IUserDeletionRequestDo
	Limit(limit int) IUserDeletionRequestDo
	Offset(offset int) IUserDeletionRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDeletionRequestDo
	Unscoped() IUserDeletionRequestDo
	Create(values ...*model.UserDeletionRequest) error
	CreateInBatches(values []*model.UserDeletionRequest, batchSize int) error
	Save(values ...*model.UserDeletionRequest) error
	First() (*model.UserDeletionRequest, error)
	Take() (*model.UserDeletionRequest, error)
	Last() (*model.UserDeletionRequest, error)
	Find() ([]*model.UserDeletionRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDeletionRequest, err error)
	FindInBatches(result *[]*model.UserDeletionRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserDeletionRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDeletionRequestDo
	Assign(attrs ...field.AssignExpr) IUserDeletionRequestDo
	Joins(fields ...field.RelationField) IUserDeletionRequestDo
	Preload(fields ...field.RelationField) IUserDeletionRequestDo
	FirstOrInit() (*model.UserDeletionRequest, error)
	FirstOrCreate() (*model.UserDeletionRequest, error)
	FindByPage(offset int, limit int) (result []*model.UserDeletionRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDeletionRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDeletionRequestDo) Debug() IUserDeletionRequestDo {
	return u.withDO(u.DO.Debug())
}

func (u userDeletionRequestDo) WithContext(ctx context.Context) IUserDeletionRequestDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDeletionRequestDo) ReadDB() IUserDeletionRequestDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDeletionRequestDo) WriteDB() IUserDeletionRequestDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDeletionRequestDo) Session(config *gorm.Session) IUserDeletionRequestDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDeletionRequestDo) Clauses(conds ...clause.Expression) IUserDeletionRequestDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDeletionRequestDo) Returning(value interface{}, columns ...string) IUserDeletionRequestDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDeletionRequestDo) Not(conds ...gen.Condition) IUserDeletionRequestDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDeletionRequestDo) Or(conds ...gen.Condition) IUserDeletionRequestDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDeletionRequestDo) Select(conds ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDeletionRequestDo) Where(conds ...gen.Condition) IUserDeletionRequestDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDeletionRequestDo) Order(conds ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDeletionRequestDo) Distinct(cols ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDeletionRequestDo) Omit(cols ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDeletionRequestDo) Join(table schema.Tabler, on ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDeletionRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDeletionRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDeletionRequestDo) Group(cols ...field.Expr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDeletionRequestDo) Having(conds ...gen.Condition) IUserDeletionRequestDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDeletionRequestDo) Limit(limit int) IUserDeletionRequestDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDeletionRequestDo) Offset(offset int) IUserDeletionRequestDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDeletionRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDeletionRequestDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDeletionRequestDo) Unscoped() IUserDeletionRequestDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDeletionRequestDo) Create(values ...*model.UserDeletionRequest) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDeletionRequestDo) CreateInBatches(values []*model.UserDeletionRequest, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDeletionRequestDo) Save(values ...*model.UserDeletionRequest) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDeletionRequestDo) First() (*model.UserDeletionRequest, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeletionRequest), nil
	}
}

func (u userDeletionRequestDo) Take() (*model.UserDeletionRequest, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeletionRequest), nil
	}
}

func (u userDeletionRequestDo) Last() (*model.UserDeletionRequest, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeletionRequest), nil
	}
}

func (u userDeletionRequestDo) Find() ([]*model.UserDeletionRequest, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDeletionRequest), err
}

func (u userDeletionRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDeletionRequest, err error) {
	buf := make([]*model.UserDeletionRequest, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDeletionRequestDo) FindInBatches(result *[]*model.UserDeletionRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDeletionRequestDo) Attrs(attrs ...field.AssignExpr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDeletionRequestDo) Assign(attrs ...field.AssignExpr) IUserDeletionRequestDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDeletionRequestDo) Joins(fields ...field.RelationField) IUserDeletionRequestDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDeletionRequestDo) Preload(fields ...field.RelationField) IUserDeletionRequestDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDeletionRequestDo) FirstOrInit() (*model.UserDeletionRequest, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeletionRequest), nil
	}
}

func (u userDeletionRequestDo) FirstOrCreate() (*model.UserDeletionRequest, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeletionRequest), nil
	}
}

func (u userDeletionRequestDo) FindByPage(offset int, limit int) (result []*model.UserDeletionRequest, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDeletionRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDeletionRequestDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDeletionRequestDo) Delete(models ...*model.UserDeletionRequest) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDeletionRequestDo) withDO(do gen.Dao) *userDeletionRequestDo {
	u.DO = *do.(*gen.DO)
	return u
}
