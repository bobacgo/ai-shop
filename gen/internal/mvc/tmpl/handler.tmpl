package handler

import (
	"github.com/gin-gonic/gin"
	"{{.Project}}/api/{{.Module}}/{{.ApiVersion}}"
	"{{.Project}}/{{.Domain}}/{{.Module}}/service"
    "github.com/gogoclouds/gogo-services/common-lib/web/r"
    "github.com/gogoclouds/gogo-services/common-lib/web/r/errs"
	"log/slog"
)

type {{.Struct}}Server struct {
	svc *service.{{.Struct}}Service
}

func New{{.Struct}}Server(svc *service.{{.Struct}}Service) {{.ApiVersion}}.{{.Struct}}Server {
	return &{{.Struct}}Server{svc: svc}
}

func (h *{{.Struct}}Server) List(ctx *gin.Context) {
	req := new({{.ApiVersion}}.{{.Struct}}ListRequest)
	if err := ctx.ShouldBind(req); err != nil {
		r.Reply(ctx, errs.BadRequest.WithDetails(err))
		return
	}
	list, err := h.svc.List(ctx, req)
	if err != nil {
		slog.ErrorContext(ctx, "List error", slog.String("err", err.Error()))
		r.Reply(ctx, err)
		return
	}
	r.Reply(ctx, list)
}

func (h *{{.Struct}}Server) Details(ctx *gin.Context) {
	req := new({{.ApiVersion}}.{{.Struct}}Request)
	if err := ctx.ShouldBind(req); err != nil {
		r.Reply(ctx, errs.BadRequest.WithDetails(err))
		return
	}
	data, err := h.svc.GetDetails(ctx, req)
	if err != nil {
		slog.ErrorContext(ctx, "Details error", slog.String("err", err.Error()))
		r.Reply(ctx, err)
		return
	}
	r.Reply(ctx, data)
}

func (h *{{.Struct}}Server) Add(ctx *gin.Context) {
	req := new({{.ApiVersion}}.{{.Struct}}CreateRequest)
	if err := ctx.ShouldBind(req); err != nil {
		r.Reply(ctx, errs.BadRequest.WithDetails(err))
		return
	}
	if err := h.svc.Add(ctx, req); err != nil {
		slog.ErrorContext(ctx, "Add error", slog.String("err", err.Error()))
		r.Reply(ctx, err)
		return
	}
	r.Reply(ctx, nil)
}

func (h *{{.Struct}}Server) Update(ctx *gin.Context) {
	req := new({{.ApiVersion}}.{{.Struct}}UpdateRequest)
	if err := ctx.ShouldBind(req); err != nil {
		r.Reply(ctx, errs.BadRequest.WithDetails(err))
		return
	}
	if err := h.svc.Update(ctx, req); err != nil {
		slog.ErrorContext(ctx, "Update error", slog.String("err", err.Error()))
		r.Reply(ctx, err)
		return
	}
	r.Reply(ctx, nil)
}

func (h *{{.Struct}}Server) Delete(ctx *gin.Context) {
	req := new({{.ApiVersion}}.{{.Struct}}DeleteRequest)
	if err := ctx.ShouldBind(req); err != nil {
		r.Reply(ctx, errs.BadRequest.WithDetails(err))
		return
	}
	if err := h.svc.Delete(ctx, req); err != nil {
		slog.ErrorContext(ctx, "Delete error", slog.String("err", err.Error()))
		r.Reply(ctx, err)
		return
	}
	r.Reply(ctx, nil)
}