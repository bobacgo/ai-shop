// Code generated by error message generator. DO NOT EDIT.

package errs

import (
	"context"

	"github.com/bobacgo/kit/web/r/status"
	grpcstatus "google.golang.org/grpc/status"
	"google.golang.org/grpc/codes"
)

// ErrorMessageMap 存储错误码及其多语言信息
var ErrorMessageMap = map[Err]map[string]string{
	10020001: {
		"zh": "用户不存在",
		"en": "User not found",
	},
	10020002: {
		"zh": "用户被封禁",
		"en": "User banned",
	},
	10020003: {
		"zh": "密码错误",
		"en": "Invalid password",
	},
}

// New 返回带有错误信息的状态
func New(ctx context.Context, code Err) *status.Status {
	return status.New(uint32(code), GetErrorMessage(ctx, code))
}

// Status grpc status 返回带有错误信息的状态
func Status(ctx context.Context, code Err) error {
	return grpcstatus.New(codes.Code(code), GetErrorMessage(ctx, code)).Err()
}

// GetErrorMessage 获取错误信息
func GetErrorMessage(ctx context.Context, code Err) string {
	// 从context中获取语言设置
	lang := "zh"
	if v := ctx.Value("lang"); v != nil {
		if s, ok := v.(string); ok {
			lang = s
		}
	}

	if translations, exists := ErrorMessageMap[code]; exists {
		if msg, ok := translations[lang]; ok {
			return msg
		}
		return translations["zh"] // 默认返回中文
	}
	return "未知错误"
}
